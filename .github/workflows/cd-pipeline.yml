name: DevSecOps Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Construir imagen service1
        run: docker build -t service1 ./service1

      - name: Construir imagen service2
        run: docker build -t service2 ./service2

      - name: Construir imagen service3
        run: docker build -t service3 ./service3

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Instalar dependencias
        run: |
          pip install -r service1/requirements.txt
          pip install -r service2/requirements.txt
          pip install -r service3/requirements.txt
          pip install pytest

      - name: Ejecutar pruebas en service1
        run: pytest service1/

      - name: Ejecutar pruebas en service2
        run: pytest service2/

      - name: Ejecutar pruebas en service3
        run: pytest service3/

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Escaneo de vulnerabilidades con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "service1"

      - name: Análisis de código con SonarQube
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=your_project_key
            -Dsonar.organization=your_org
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Instalar kubectl y ArgoCD CLI
        run: |
          sudo apt-get update && sudo apt-get install -y curl
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Validar YAMLs antes del despliegue
        run: |
          pip install kubeval
          kubeval manifests/*.yaml || echo "Validación completada con advertencias."

      - name: Login a ArgoCD
        run: |
          argocd login localhost:8080 --username admin --password admin --insecure

      - name: Sincronizar aplicación con ArgoCD
        run: |
          argocd app sync microservices-app
          argocd app wait microservices-app --timeout 300

      - name: Enviar notificación con Twilio (CD Finalizado)
        run: |
          curl -X POST https://api.twilio.com/2010-04-01/Accounts/${{ secrets.TWILIO_SID }}/Messages.json \
          --data-urlencode "Body=✅ Pipeline completado y aplicación desplegada correctamente." \
          --data-urlencode "From=whatsapp:+14155238886" \
          --data-urlencode "To=whatsapp:+593TU_NUMERO_AQUI" \
          -u ${{ secrets.TWILIO_SID }}:${{ secrets.TWILIO_AUTH_TOKEN }}
