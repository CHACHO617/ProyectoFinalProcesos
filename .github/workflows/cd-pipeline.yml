name: DevSecOps Pipeline

on:
  push:
    branches:
      - test
      - main

env:
  TWILIO_FROM: "whatsapp:+14155238886"
  TWILIO_TO: "whatsapp:+593997357707"
  ARGOCD_SERVER: "localhost:8080"
  ARGOCD_USERNAME: "admin"
  ARGOCD_PASSWORD: "V9WseQDEtlR4TJCh"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Build & Scan service1
        run: |
          docker build -t service1 ./service1
          trivy image service1

      - name: Build & Scan service2
        run: |
          docker build -t service2 ./service2
          trivy image service2

      - name: Build & Scan service3
        run: |
          docker build -t service3 ./service3
          trivy image service3

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r service1/requirements.txt
          pip install -r service2/requirements.txt
          pip install -r service3/requirements.txt
          pip install pytest

      - name: Run tests service1
        run: pytest service1/

      - name: Run tests service2
        run: pytest service2/

      - name: Run tests service3
        run: pytest service3/

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=CHACHO617_ProyectoFinalProcesos
            -Dsonar.organization=chacho617
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v3

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Install kubeval
        run: |
          curl -sSL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin/

      - name: Validate YAML manifests
        run: find k8s/ -name "*.yaml" -exec kubeval {} + || echo "Advertencias detectadas en YAMLs"

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER \
            --username $ARGOCD_USERNAME \
            --password $ARGOCD_PASSWORD \
            --insecure

      - name: Validar políticas de despliegue
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/test" ]]; then
            app_name="microservices-test"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            app_name="microservices-prod"
          else
            echo "Rama no soportada"
            exit 1
          fi

          estado=$(argocd app get $app_name -o json | jq -r '.status.health.status')
          sync=$(argocd app get $app_name -o json | jq -r '.status.sync.status')

          if [[ "$estado" != "Healthy" || "$sync" != "Synced" ]]; then
            echo "❌ Error: La aplicación $app_name no está saludable o sincronizada"
            exit 1
          fi

      - name: Desplegar según la rama
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/test" ]]; then
            app_name="microservices-test"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            app_name="microservices-prod"
          fi

          argocd app sync $app_name
          argocd app wait $app_name --timeout 300

      - name: Enviar notificación por WhatsApp
        run: |
          curl -X POST https://api.twilio.com/2010-04-01/Accounts/${{ secrets.TWILIO_SID }}/Messages.json \
            --data-urlencode "Body=✅ Despliegue exitoso en entorno ${{ github.ref_name }}" \
            --data-urlencode "From=${{ env.TWILIO_FROM }}" \
            --data-urlencode "To=${{ env.TWILIO_TO }}" \
            -u ${{ secrets.TWILIO_SID }}:${{ secrets.TWILIO_AUTH_TOKEN }}
